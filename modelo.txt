
PORT=3000
DB_HOST=localhost
DB_USER=root
DB_PASSWORD=
DB_NAME=darxdar
JWT_SECRET=745d285bef09734e4c5f2214a53d2b8b14f101a869ed0abc744c79375f496efcff9fdae2da2ad492393f78812b37f5118bcb702e31f9cf6f63fff0c7d1bae325



PORT=3306
DB_HOST=mysql.railway.internal
DB_USER=root
DB_PASSWORD=mpDLUmgXCFqPouZcElBVBFAVUsCZkOPy
DB_NAME=railway
JWT_SECRET=745d285bef09734e4c5f2214a53d2b8b14f101a869ed0abc744c79375f496efcff9fdae2da2ad492393f78812b37f5118bcb702e31f9cf6f63fff0c7d1bae325




// ipe de dominio : 185.202.236.124
const generarCodigo = (rol) => {
    const prefix = rol === 'Donante' ? 'D' : 'B';
    const parte1 = Math.floor(100 + Math.random() * 900); // 3 dígitos
    const parte2 = Math.floor(10 + Math.random() * 90); // 2 dígitos
    return `${prefix}${parte1}-${parte2}`;
};

app.post('/usuarios', (req, res) => {
    const { nombres, apellidos, dni, correo, telefono, direccion, calle, ciudad, estado, rol, password, foto } = req.body;
    
    if (!['Donante', 'Beneficiario'].includes(rol)) {
        return res.status(400).json({ error: 'Rol inválido' });
    }

    const codigo = generarCodigo(rol);
    
    const query = 'INSERT INTO usuarios (nombres, apellidos, dni, codigo, correo, telefono, direccion, calle, ciudad, estado, rol, foto, password) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';
    connection.query(query, [nombres, apellidos, dni, codigo, correo, telefono, direccion, calle, ciudad, estado, rol, foto, password], (err, results) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        res.status(201).json({ message: 'Usuario registrado con éxito', codigo });
    });
});

CREATE TABLE usuarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombres VARCHAR(100) NOT NULL,
    apellidos VARCHAR(100) NOT NULL,
    dni VARCHAR(20) UNIQUE NOT NULL,
    codigo VARCHAR(7) UNIQUE NOT NULL, 
    correo VARCHAR(100) UNIQUE NOT NULL,
    telefono VARCHAR(20) NOT NULL,
    direccion VARCHAR(255) NOT NULL,
    calle VARCHAR(100) NOT NULL,
    ciudad VARCHAR(100) NOT NULL,
    estado VARCHAR(100) NOT NULL,
    rol ENUM('Donante', 'Beneficiario') NOT NULL,
    foto TEXT,
    password VARCHAR(255) NOT NULL 
);

CREATE TABLE categorias (
    idcategoria INT AUTO_INCREMENT PRIMARY KEY,
    titulo VARCHAR(100) NOT NULL,
    imagen TEXT NOT NULL,
    descripcion TEXT,
    estatus INT NOT NULL DEFAULT 1 -- 1: Disponible, 0: No disponible
);

CREATE TABLE productos (
    idproducto INT AUTO_INCREMENT PRIMARY KEY,
    codigo VARCHAR(20) UNIQUE NOT NULL,
    nombreproducto VARCHAR(100) NOT NULL,
    imagen TEXT NOT NULL,
    idcategoria INT NOT NULL,
    talla VARCHAR(20),
    color VARCHAR(50),
    tela VARCHAR(50),
    descripcion TEXT,
    estatus INT NOT NULL DEFAULT 1, 
    cantidad INT NOT NULL DEFAULT 0,
    FOREIGN KEY (idcategoria) REFERENCES categorias(idcategoria) ON DELETE CASCADE
);

CREATE TABLE carrito (
    idcarrito INT AUTO_INCREMENT PRIMARY KEY,
    estatus ENUM('llevar', 'dejar') NOT NULL,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_edicion TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE carrito_productos (
    idcarrito INT NOT NULL,
    idproducto INT NOT NULL,
    cantidad INT NOT NULL,
    FOREIGN KEY (idcarrito) REFERENCES carrito(idcarrito) ON DELETE CASCADE,
    FOREIGN KEY (idproducto) REFERENCES productos(idproducto) ON DELETE CASCADE,
    PRIMARY KEY (idcarrito, idproducto) 
);

CREATE TABLE pedidos (
    idpedido INT AUTO_INCREMENT PRIMARY KEY,
    iddonante INT NOT NULL,
    idbeneficiario INT NOT NULL,
    idcarrito INT NOT NULL,
    total INT NOT NULL,
    codigo VARCHAR(20) UNIQUE NOT NULL,
    estatus INT NOT NULL DEFAULT 0,  0--Rechazado y 1--Rechazado 
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (iddonante) REFERENCES usuarios(id) ON DELETE CASCADE,
    FOREIGN KEY (idbeneficiario) REFERENCES usuarios(id) ON DELETE CASCADE,
    FOREIGN KEY (idcarrito) REFERENCES carrito(idcarrito) ON DELETE CASCADE
);





const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const connection = require('./db');
require('dotenv').config();

const app = express();
app.use(express.json());

const SECRET_KEY = process.env.JWT_SECRET || 'mi_llave_secreta';

// 📌 Registro de usuario
app.post('/usuarios', async (req, res) => {
    const { nombres, apellidos, dni, correo, telefono, direccion, calle, ciudad, estado, rol, password, foto } = req.body;

    if (!['Donante', 'Beneficiario'].includes(rol)) {
        return res.status(400).json({ error: 'Rol inválido' });
    }

    const codigo = generarCodigoUsuario(rol);
    const hashedPassword = await bcrypt.hash(password, 10);

    const query = 'INSERT INTO usuarios (nombres, apellidos, dni, codigo, correo, telefono, direccion, calle, ciudad, estado, rol, foto, password) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';
    connection.query(query, [nombres, apellidos, dni, codigo, correo, telefono, direccion, calle, ciudad, estado, rol, foto, hashedPassword], (err, results) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        res.status(201).json({ message: 'Usuario registrado', codigo });
    });
});

// 🔐 Login
app.post('/login', (req, res) => {
    const { correo, password } = req.body;

    connection.query('SELECT * FROM usuarios WHERE correo = ?', [correo], async (err, results) => {
        if (err || results.length === 0) {
            return res.status(401).json({ error: 'Correo o contraseña incorrectos' });
        }

        const usuario = results[0];
        const match = await bcrypt.compare(password, usuario.password);
        if (!match) {
            return res.status(401).json({ error: 'Correo o contraseña incorrectos' });
        }

        const token = jwt.sign({ id: usuario.id, rol: usuario.rol }, SECRET_KEY, { expiresIn: '1h' });
        res.json({ message: 'Login exitoso', token });
    });
});

// ✏️ Editar usuario
app.put('/usuarios/:id', (req, res) => {
    const { nombres, apellidos, telefono, direccion, ciudad, estado, foto } = req.body;
    const { id } = req.params;

    const query = 'UPDATE usuarios SET nombres=?, apellidos=?, telefono=?, direccion=?, ciudad=?, estado=?, foto=? WHERE id=?';
    connection.query(query, [nombres, apellidos, telefono, direccion, ciudad, estado, foto, id], (err, results) => {
        if (err) return res.status(500).json({ error: err.message });
        res.json({ message: 'Usuario actualizado' });
    });
});

// 🗑️ Eliminar usuario
app.delete('/usuarios/:id', (req, res) => {
    const { id } = req.params;

    connection.query('DELETE FROM usuarios WHERE id=?', [id], (err, results) => {
        if (err) return res.status(500).json({ error: err.message });
        res.json({ message: 'Usuario eliminado' });
    });
});

// 🔍 Mostrar usuario por ID
app.get('/usuarios/:id', (req, res) => {
    connection.query('SELECT * FROM usuarios WHERE id=?', [req.params.id], (err, results) => {
        if (err || results.length === 0) return res.status(404).json({ error: 'Usuario no encontrado' });
        res.json(results[0]);
    });
});

// 🏷️ Filtrar por rol (Donante o Beneficiario)
app.get('/usuarios/rol/:rol', (req, res) => {
    connection.query('SELECT * FROM usuarios WHERE rol=?', [req.params.rol], (err, results) => {
        if (err) return res.status(500).json({ error: err.message });
        res.json(results);
    });
});

// 🌍 Filtrar por ciudad
app.get('/usuarios/ciudad/:ciudad', (req, res) => {
    connection.query('SELECT * FROM usuarios WHERE ciudad=?', [req.params.ciudad], (err, results) => {
        if (err) return res.status(500).json({ error: err.message });
        res.json(results);
    });
});

// 🔢 Filtrar por código
app.get('/usuarios/codigo/:codigo', (req, res) => {
    connection.query('SELECT * FROM usuarios WHERE codigo=?', [req.params.codigo], (err, results) => {
        if (err) return res.status(500).json({ error: err.message });
        res.json(results);
    });
});

// 🆔 Filtrar por DNI
app.get('/usuarios/dni/:dni', (req, res) => {
    connection.query('SELECT * FROM usuarios WHERE dni=?', [req.params.dni], (err, results) => {
        if (err) return res.status(500).json({ error: err.message });
        res.json(results);
    });
});

// 🔄 Resetear contraseña
app.put('/usuarios/reset-password/:id', async (req, res) => {
    const { password } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);

    connection.query('UPDATE usuarios SET password=? WHERE id=?', [hashedPassword, req.params.id], (err, results) => {
        if (err) return res.status(500).json({ error: err.message });
        res.json({ message: 'Contraseña actualizada' });
    });
});

// 🚀 Servidor
app.listen(3000, () => {
    console.log('Servidor corriendo en http://localhost:3000');
});
